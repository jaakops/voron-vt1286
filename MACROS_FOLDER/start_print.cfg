#15 min prepare time from cold to 65 chamber and start_print done

[gcode_macro PRINT_START]
gcode:
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default(2)|float %} 
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  SET_GCODE_OFFSET Z=0                                             # Beacon set offset to 0 #Beacon Contact 1/4
  SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=cb1_4020 TARGET=30
  CG28                                                             # Full home (XYZ)
  G90                                                              # Absolute position
  BED_MESH_CLEAR                                                   # Clears old saved bed mesh (if any)
  G1 X{x_wait} Y{y_wait} Z80 F9000                                 # Goes to center of the bed
  M140 S{target_bed}                                               # Set bed temp but dont wait
  
  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    #M106 S255                                                     # Turns on the PT-fan
    SET_FAN_SPEED FAN=Nevermore SPEED=0.88                         # Turns on the nevermore
    #SET_CHAMBER CHAMBER={target_chamber}                          # Bed fans PID   #chamber heater
    SET_DISPLAY_TEXT MSG="Waiting for chamber to hit {target_chamber-2}"
    TEMPERATURE_WAIT SENSOR="heater_generic heater_chamber" MINIMUM={target_chamber-2} #{target_chamber-5}
    SET_DISPLAY_TEXT MSG="Running AWD sync"                        # Displays info
    C_SYNC_MOTORS                                                  # Sync motors if not synced
    SET_DISPLAY_TEXT MSG="Heating bed to {target_bed}c"
    M190 S{target_bed}                                             # Sets the target temp for the bed, waits
    
  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
    {% else %}
    SET_DISPLAY_TEXT MSG="No chamber, bed to: {target_bed}c, wait 5min for bedtemp to stabilize"           
    SET_DISPLAY_TEXT MSG="Heating bed to {target_bed}c and running AWD sync"
    M190 S{target_bed}                                              # Sets the target temp for the bed, waits
    C_SYNC_MOTORS
    #SET_DISPLAY_TEXT MSG="Soak for 2min" #5min                
    #G4 P120000 #P300000                                            # Waits 2 ~~5~~ min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          
  G1 Z40 F10000
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150                # Heats the nozzle to 150c but doesnt wait for it to stabilize #replaced by mpc included temperature_wait
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM=147   
  #M109 S150                                                       # Heats the nozzle to 150c, waits
  G28 Z METHOD=CONTACT CALIBRATE=1                                 # Calibrate z offset and beacon model #Beacon Contact 2/4
  
  G1 X{x_wait} Y{y_wait} Z40 F9000                                 # Goes to center of the bed
  SET_DISPLAY_TEXT MSG="Clean nozzle 1/2"             
  CLEAN_NOZZLE                                                     # Clean nozzle on brass brush. 1/2
  EXIT_NOZZLE_PARK                                                 # 2/2
  G1 X{x_wait} Y{y_wait} Z40 F9000
  
  #SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=0                         #https://dangerklipper.io/Dockable_Probe.html#status
  #ATTACH_PROBE 
  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     
  Z_TILT_ADJUST                                                    # Levels the buildplate via z_tilt_adjust
  G28 Z METHOD=CONTACT CALIBRATE=0                                 # Homes Z again after z_tilt_adjust #Beacon Contact 3/4
  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    
  BED_MESH_CALIBRATE ADAPTIVE=1 RUNS=2                             # Starts bed mesh #Beacon Contact 4/4
  #DETACH_PROBE
  #SET_DOCKABLE_PROBE AUTO_ATTACH_DETACH=1                         # Https://dangerklipper.io/Dockable_Probe.html#status
  
  
  # Heats up the nozzle up to target via data from slicer
  M104 S{target_extruder}                                          # Start heat extruder and dont wait
  G1 X{x_wait} Y{y_wait} Z40 F9000                                 # Goes to center of the bed
  G4 P25000                                                        #wait 25s for nozzle to heat some before wipe
  #TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_extruder|int-20}
  SET_DISPLAY_TEXT MSG="Clean nozzle 2/2"             
  CLEAN_NOZZLE                                                     # Clean nozzle on brass brush. 1/2
  EXIT_NOZZLE_PARK                                                 # 2/2
  G1 X{x_wait} Y{y_wait} Z40 F9000                                 # Goes to center of the bed
  M107                                                             # Turns off partcooling fan
  SET_DISPLAY_TEXT MSG="Hotend to print temp of: {target_extruder}c"             
  M109 S{target_extruder}                                          # Heats the nozzle to printing temp and waits
  #SET_HEATER_TEMPERATURE HEATER=extruder TARGET={target_extruder|int} #Heats the nozzle to printing temp but doesnt wait for it to stabilize #replaced by mpc included temperature wait
  #TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_extruder|int-5} #replaced by mpc

  SET_GCODE_OFFSET Z=0.06                                          # Add a little offset for hotend thermal expansion

  M117                                                             # Sets empty message
  SQUIGGLY_PURGE
  #LINE_PURGE
  #stock purge line below
  #G0 X{x_wait - 50} Y4 F10000                                     # Moves to starting point
  #G0 Z0.4                                                         # Raises Z to 0.4
  #G91                                                             # Incremental positioning 
  #G1 X100 E20 F1000                                               # Purge line
  #G90                                                             # Absolut position




##################################################################################################################################
##################################################################################################################################


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %} #was +2 then +10
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                                         ; wait for buffer to clear
    G92 E0                                       ; zero the extruder
    G1 E-15.0 F1800                              ; retract filament
    
    TURN_OFF_HEATERS
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0 #disable extruder for g2 reloading filament
    
    G90                                          ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000      ; move nozzle fast to remove stringing
    #G0 X40 Y{th.axis_maximum.y - 40} F8000 #3600  #X{th.axis_maximum.x//2}; park nozzle at rear
    M107                                         ; turn off fan
    
    CLEAN_NOZZLE #_PRINT_END
    PARK_NOZZLE #_PRINT_END
    SET_DISPLAY_TEXT MSG="Print finished"
    RESPOND TYPE=echo MSG="Print over. Starting power off check macro"
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30          #@@@@@@@@@@@@@@@@@@@@@uncomment when plug on trident
    
    BED_MESH_CLEAR
    _RESET_VELOCITY_LIMIT                        #definition at bottom
    #M18                                         #disable all motors
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=180 #keeps nevermore running 180s
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


##################################################################################################################################
##################################################################################################################################


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(30)|int %}                                                   ; z hop amount, default 10

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F10000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}



##################################################################################################################################
##################################################################################################################################

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}



##################################################################################################################################
##################################################################################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    #SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

##################################################################################################################################
##################################################################################################################################

#Aliases

[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause

[gcode_macro END_PRINT]
gcode:
  PRINT_END

[gcode_macro START_PRINT]
gcode:
  PRINT_START

[gcode_macro RELOAD_MACROS]
gcode:
  reload_gcode_macros

[gcode_macro _RESET_VELOCITY_LIMIT]
#description: Restore all velocity limits to configured defaults
gcode:
  SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity}
  SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
  SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
  M220 S100
  M221 S100
  M118 Velocity limits have been reset.
